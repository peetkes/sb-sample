/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.5/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java'
    id 'idea'

    // Apply the application plugin to add support for building an application
    id 'application'
}

// Define the main class for the application
mainClassName = 'App'

dependencies {
    // This dependency is found on compile classpath of this component and consumers.
    compile 'com.google.guava:guava:23.0'
    compile 'com.marklogic:marklogic-spring-batch-core:1.+'
    compile "com.marklogic:spring-batch-rdbms:1.+"

    runtime "com.h2database:h2:1.4.193"

    // Use JUnit test framework
    testCompile 'junit:junit:4.12'
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

task runOneStepJob(type: JavaExec) {
    main = 'com.marklogic.spring.batch.core.launch.support.CommandLineJobRunner'
    description = "Run the yourJob Config program"
    classpath = sourceSets.main.runtimeClasspath
    args = ["--job_path", "nl.marklogic.sb.OneStepJobConfig",
            "--job_id", "oneStepJob",
            "--output_collections", "oneStepJob",
            "--chunk_size", "50",
            "--thread_count", "1",
            "--next"]
}

task runTwoStepJob(type: JavaExec) {
    main = 'com.marklogic.spring.batch.core.launch.support.CommandLineJobRunner'
    description = "Run the twoStep Config program"
    classpath = sourceSets.main.runtimeClasspath
    args = ["--job_path", "nl.marklogic.sb.TwoStepJobConfig",
            "--job_id", "twoStepJob",
            "--output_collections", "twoStepJob",
            "--chunk_size", "50",
            "--thread_count", "1",
            "--next"]
}

task runMigrationJob(type: JavaExec) {
    main = 'com.marklogic.spring.batch.core.launch.support.CommandLineJobRunner'
    description = "Run the migration program"
    classpath = sourceSets.main.runtimeClasspath
    args = ["--job_path", "nl.marklogic.sb.MigrationConfig",
            "--job_id", "migrateJob",
            "--jdbc_driver","org.h2.Driver",
            "--jdbc_url","jdbc:h2:file:./data/h2/sample",
            "--jdbc_username","sa",
            "--jdbc_password","",
            "--all_tables","true",
            "--document_type","xml",
            "--output_uri_prefix","/data/",
            "--permissions","rest-reader,read,rest-writer,update",
            "--root_local_name","_tableName",
            "--sql","SELECT * FROM PRODUCT",
            "--uri_id",uri_id,
            "--collections","migrate,rdbms",
            "--thread_count",thread_count,
            "--chunk_size",chunk_size
    ]
}

task loadH2Data(type: JavaExec) {
    classpath = configurations.testRuntime
    main = "org.h2.tools.RunScript"
    args = [
            "-url", "jdbc:h2:file:./data/h2/sample",
            "-user", "sa",
            "-script", "./data/h2setup.sql"
    ]
}